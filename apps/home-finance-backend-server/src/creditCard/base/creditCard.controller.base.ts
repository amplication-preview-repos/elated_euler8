/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { CreditCardService } from "../creditCard.service";
import { CreditCardCreateInput } from "./CreditCardCreateInput";
import { CreditCard } from "./CreditCard";
import { CreditCardFindManyArgs } from "./CreditCardFindManyArgs";
import { CreditCardWhereUniqueInput } from "./CreditCardWhereUniqueInput";
import { CreditCardUpdateInput } from "./CreditCardUpdateInput";
import { TransactionFindManyArgs } from "../../transaction/base/TransactionFindManyArgs";
import { Transaction } from "../../transaction/base/Transaction";
import { TransactionWhereUniqueInput } from "../../transaction/base/TransactionWhereUniqueInput";

export class CreditCardControllerBase {
  constructor(protected readonly service: CreditCardService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: CreditCard })
  @swagger.ApiBody({
    type: CreditCardCreateInput,
  })
  async createCreditCard(
    @common.Body() data: CreditCardCreateInput
  ): Promise<CreditCard> {
    return await this.service.createCreditCard({
      data: {
        ...data,

        user: data.user
          ? {
              connect: data.user,
            }
          : undefined,
      },
      select: {
        cardHolderName: true,
        cardNumber: true,
        createdAt: true,
        expiryDate: true,
        id: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [CreditCard] })
  @ApiNestedQuery(CreditCardFindManyArgs)
  async creditCards(@common.Req() request: Request): Promise<CreditCard[]> {
    const args = plainToClass(CreditCardFindManyArgs, request.query);
    return this.service.creditCards({
      ...args,
      select: {
        cardHolderName: true,
        cardNumber: true,
        createdAt: true,
        expiryDate: true,
        id: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: CreditCard })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async creditCard(
    @common.Param() params: CreditCardWhereUniqueInput
  ): Promise<CreditCard | null> {
    const result = await this.service.creditCard({
      where: params,
      select: {
        cardHolderName: true,
        cardNumber: true,
        createdAt: true,
        expiryDate: true,
        id: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: CreditCard })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @swagger.ApiBody({
    type: CreditCardUpdateInput,
  })
  async updateCreditCard(
    @common.Param() params: CreditCardWhereUniqueInput,
    @common.Body() data: CreditCardUpdateInput
  ): Promise<CreditCard | null> {
    try {
      return await this.service.updateCreditCard({
        where: params,
        data: {
          ...data,

          user: data.user
            ? {
                connect: data.user,
              }
            : undefined,
        },
        select: {
          cardHolderName: true,
          cardNumber: true,
          createdAt: true,
          expiryDate: true,
          id: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: CreditCard })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteCreditCard(
    @common.Param() params: CreditCardWhereUniqueInput
  ): Promise<CreditCard | null> {
    try {
      return await this.service.deleteCreditCard({
        where: params,
        select: {
          cardHolderName: true,
          cardNumber: true,
          createdAt: true,
          expiryDate: true,
          id: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/transactions")
  @ApiNestedQuery(TransactionFindManyArgs)
  async findTransactions(
    @common.Req() request: Request,
    @common.Param() params: CreditCardWhereUniqueInput
  ): Promise<Transaction[]> {
    const query = plainToClass(TransactionFindManyArgs, request.query);
    const results = await this.service.findTransactions(params.id, {
      ...query,
      select: {
        amount: true,

        bankAccount: {
          select: {
            id: true,
          },
        },

        createdAt: true,

        creditCard: {
          select: {
            id: true,
          },
        },

        date: true,
        id: true,
        tags: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/transactions")
  async connectTransactions(
    @common.Param() params: CreditCardWhereUniqueInput,
    @common.Body() body: TransactionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      transactions: {
        connect: body,
      },
    };
    await this.service.updateCreditCard({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/transactions")
  async updateTransactions(
    @common.Param() params: CreditCardWhereUniqueInput,
    @common.Body() body: TransactionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      transactions: {
        set: body,
      },
    };
    await this.service.updateCreditCard({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/transactions")
  async disconnectTransactions(
    @common.Param() params: CreditCardWhereUniqueInput,
    @common.Body() body: TransactionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      transactions: {
        disconnect: body,
      },
    };
    await this.service.updateCreditCard({
      where: params,
      data,
      select: { id: true },
    });
  }
}
